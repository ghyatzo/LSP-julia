{
    // Set the full path to the Julia executable (including the executable
    // itself) or leave empty if Julia is in your PATH
    "julia_executable_path": "",

    // Additional environmental variables for the Julia REPL
    "repl_env_variables": {
        "JULIA_NUM_THREADS": "4"
    },

    // Show name of the active Julia project/environment in the status bar
    "show_environment_status": true,

    // Language server configurations
    "command": ["$julia_exe", "--startup-file=no", "--history-file=no", "--project=$server_path", "--eval", "using LanguageServer; runserver()"],
    "selector": "source.julia",
    "initializationOptions": {
        "julialangTestItemIdentification": true
    },

    // Formatting options must be configured through a .JuliaFormatter.toml file,
    // see https://domluna.github.io/JuliaFormatter.jl/stable/config/
    "settings": {
        // Sets the mode for completions.
        // Valid values:
        // - "exportedonly": Show completions for the current namespace.
        // - "import": Show completions for the current namespace and unexported
        //       variables of `using`ed modules. Selection of an unexported
        //       variable will result in the automatic insertion of an explicit
        //       `using` statement.
        // - "qualify": Show completions for the current namespace and unexported
        //       variables of `using`ed modules. Selection of an unexported
        //       variable will complete to a qualified variable name.
        "julia.completionmode": "qualify",
        // Run the linter on active files.
        "julia.lint.run": true,
        // This compares call signatures against all known methods for the called
        // function. Calls with too many or too few arguments, or unknown keyword
        // parameters are highlighted.
        "julia.lint.call": true,
        // Check for constant conditionals in if statements that result in
        // branches never being reached.
        "julia.lint.constif": true,
        // Check variables used in type declarations are datatypes.
        "julia.lint.datadecl": true,
        // Specifies sub-directories in a package directory where only basic
        // linting is. This drastically lowers the chance for false positives.
        "julia.lint.disabledDirs": [
            "docs",
            "test"
        ],
        // Check iterator syntax of loops. Will identify, for example, attempts
        // to iterate over single values.
        "julia.lint.iter": true,
        // Check for deterministic lazy boolean operators.
        "julia.lint.lazy": true,
        // Highlight unknown symbols. The `symbols` option will not mark unknown
        // fields.
        // Valid values: "none", "symbols", "all"
        "julia.lint.missingrefs": "none",
        // Check submodule names do not shadow their parent's name.
        "julia.lint.modname": true,
        // Check for use of `==` rather than `===` when comparing against `nothing`.
        "julia.lint.nothingcomp": true,
        // Check for type piracy - the overloading of external functions with
        // methods specified for external datatypes. 'External' here refers to
        // imported code.
        "julia.lint.pirates": true,
        // Check parameters declared in `where` statements or datatype declarations
        // are used.
        "julia.lint.typeparam": true,
        // Check that all declared arguments are used within the function body.
        "julia.lint.useoffuncargs": true,
    }
}
