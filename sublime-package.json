{
  "contributions": {
    "settings": [
      {
        "file_patterns": ["/LSP-julia.sublime-settings"],
        "schema": {
          "$id": "sublime://settings/LSP-julia",
          "properties": {
            "command": {
              "$ref": "sublime://settings/LSP#/definitions/ClientCommand"
            },
            "enabled": {
              "$ref": "sublime://settings/LSP#/definitions/ClientEnabled"
            },
            "selector": {
              "$ref": "sublime://settings/LSP#/definitions/ClientSelector"
            },
            "schemes": {
              "$ref": "sublime://settings/LSP#/definitions/ClientSchemes"
            },
            "initializationOptions": {
              "$ref": "sublime://settings/LSP#/definitions/ClientInitializationOptions"
            },
            "disabled_capabilities": {
              "$ref": "sublime://settings/LSP#/definitions/ClientDisabledCapabilities"
            },
            "julia_executable_path": {
              "description": "Full path to the Julia executable (including the file itself).",
              "type": "string",
              "default": ""
            },
            "repl_env_variables": {
              "description": "Additional environmental variables for the Julia REPL.",
              "type": "object",
              "properties": {
                "JULIA_NUM_THREADS": {
                  "description": "Maximum number of threads available to the Julia REPL.",
                  "type": "string",
                  "default": "4"
                }
              }
            },
            "settings": {
              "description": "Language server configurations.",
              "type": "object",
              // @see https://github.com/julia-vscode/julia-vscode/blob/master/package.json
              "properties": {
                "julia.completionmode": {
                  "markdownDescription": "Sets the mode for completions.",
                  "type": "string",
                  "default": "qualify",
                  "enum": ["exportedonly", "import", "qualify"],
                  "markdownEnumDescriptions": [
                    "Show completions for the current namespace.",
                    "Show completions for the current namespace and unexported variables of `using`ed modules. Selection of an unexported variable will result in the automatic insertion of an explicit `using` statement.",
                    "Show completions for the current namespace and unexported variables of `using`ed modules. Selection of an unexported variable will complete to a qualified variable name."
                  ]
                },
                "julia.lint.run": {
                  "markdownDescription": "Run the linter on active files.",
                  "type": "boolean",
                  "default": true
                },
                "julia.lint.call": {
                  "markdownDescription": "This compares call signatures against all known methods for the called function. Calls with too many or too few arguments, or unknown keyword parameters are highlighted.",
                  "type": "boolean",
                  "default": true
                },
                "julia.lint.constif": {
                  "markdownDescription": "Check for constant conditionals in if statements that result in branches never being reached.",
                  "type": "boolean",
                  "default": true
                },
                "julia.lint.datadecl": {
                  "markdownDescription": "Check variables used in type declarations are datatypes.",
                  "type": "boolean",
                  "default": true
                },
                "julia.lint.disabledDirs": {
                  "markdownDescription": "Specifies sub-directories in a package directory where only basic linting is. This drastically lowers the chance for false positives.",
                  "type": "array",
                  "default": ["docs", "test"],
                  "items": {
                    "type": "string"
                  }
                },
                "julia.lint.iter": {
                  "markdownDescription": "Check iterator syntax of loops. Will identify, for example, attempts to iterate over single values.",
                  "type": "boolean",
                  "default": true
                },
                "julia.lint.lazy": {
                  "markdownDescription": "Check for deterministic lazy boolean operators.",
                  "type": "boolean",
                  "default": true
                },
                "julia.lint.missingrefs": {
                  "markdownDescription": "Highlight unknown symbols. The `symbols` option will not mark unknown fields.",
                  "type": "string",
                  "default": "none",
                  "enum": ["none", "symbols", "all"]
                },
                "julia.lint.modname": {
                  "markdownDescription": "Check submodule names do not shadow their parent's name.",
                  "type": "boolean",
                  "default": true
                },
                "julia.lint.nothingcomp": {
                  "markdownDescription": "Check for use of `==` rather than `===` when comparing against `nothing`.",
                  "type": "boolean",
                  "default": true
                },
                "julia.lint.pirates": {
                  "markdownDescription": "Check for type piracy - the overloading of external functions with methods specified for external datatypes. 'External' here refers to imported code.",
                  "type": "boolean",
                  "default": true
                },
                "julia.lint.typeparam": {
                  "markdownDescription": "Check parameters declared in `where` statements or datatype declarations are used.",
                  "type": "boolean",
                  "default": true
                },
                "julia.lint.useoffuncargs": {
                  "markdownDescription": "Check that all declared arguments are used within the function body.",
                  "type": "boolean",
                  "default": true
                },
                "julia.format.calls": {
                  "$ref": "#/$defs/format_deprecated"
                },
                "julia.format.comments": {
                  "$ref": "#/$defs/format_deprecated"
                },
                "julia.format.curly": {
                  "$ref": "#/$defs/format_deprecated"
                },
                "julia.format.docs": {
                  "$ref": "#/$defs/format_deprecated"
                },
                "julia.format.indent": {
                  "$ref": "#/$defs/format_deprecated"
                },
                "julia.format.indents": {
                  "$ref": "#/$defs/format_deprecated"
                },
                "julia.format.iterOps": {
                  "$ref": "#/$defs/format_deprecated"
                },
                "julia.format.keywords": {
                  "$ref": "#/$defs/format_deprecated"
                },
                "julia.format.kwarg": {
                  "$ref": "#/$defs/format_deprecated"
                },
                "julia.format.lineends": {
                  "$ref": "#/$defs/format_deprecated"
                },
                "julia.format.ops": {
                  "$ref": "#/$defs/format_deprecated"
                },
                "julia.format.tuples": {
                  "$ref": "#/$defs/format_deprecated"
                },
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false,
          "$defs": {
            "format_deprecated": {
              "deprecationMessage": "This setting will be ignored. Please use a .JuliaFormatter.toml file instead."
            }
          }
        }
      }
    ]
  }
}
